import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import DashboardLayout from "@/components/DashboardLayout";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Search, TrendingUp, TrendingDown } from "lucide-react";
import { mockCoinData } from "@/data/mockCoinData";
import { cn } from "@/lib/utils";

const fetchSentimentAnalysis = async (coinName: string) => {
  const url = "https://sentiment-agent-1.onrender.com/analyze";
  
  try {
    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-Coin-Name": coinName,
      },
      body: JSON.stringify({ coin: coinName }),
    });

    // console.log("res: ", response);

    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error("Error fetching sentiment analysis:", error);
    return null;
  }
};

const Coins = () => {
  const [searchQuery, setSearchQuery] = useState("");
  const [filteredCoins, setFilteredCoins] = useState(mockCoinData);
  const navigate = useNavigate();

  useEffect(() => {
    document.title = "Cryptocurrency Market - SafeFund Guardian";
  }, []);

  useEffect(() => {
    setFilteredCoins(
      mockCoinData.filter(
        (coin) =>
          coin.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
          coin.symbol.toLowerCase().includes(searchQuery.toLowerCase())
      )
    );
  }, [searchQuery]);

  const handleCoinClick = async (coin) => {
    const data = await fetchSentimentAnalysis(coin.name);
    
    if (data) {
      navigate(`/sentiment-analysis/${coin.id}`, { state: { coin, sentimentData: data } });
    }
  };

  return (
    <DashboardLayout title="Cryptocurrency Market" description="View and analyze the latest cryptocurrency prices and sentiment data">
      <div className="relative mb-6 max-w-xl mx-auto">
        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <Search className="h-5 w-5 text-gray-400" />
        </div>
        <Input
          type="text"
          placeholder="Search for cryptocurrency..."
          className="pl-10 py-3 h-12 w-full bg-white border border-gray-200 shadow-sm rounded-xl dark:bg-slate-800 dark:border-slate-700"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
        />
      </div>

      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
        {filteredCoins.map((coin) => (
          <Card
            key={coin.id}
            className="overflow-hidden border border-gray-200 bg-white dark:bg-slate-800 dark:border-slate-700 hover:shadow-md transition-all duration-300 hover:translate-y-[-4px] cursor-pointer"
            onClick={() => handleCoinClick(coin)}
          >
            <CardContent className="p-0">
              <div className="flex justify-between items-center p-4 border-b border-gray-100 dark:border-slate-700">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 rounded-full bg-gray-50 dark:bg-slate-700 p-1 flex items-center justify-center overflow-hidden">
                    <img
                      src={coin.image}
                      alt={coin.name}
                      className="w-7 h-7 object-contain"
                      onError={(e) => {
                        (e.target as HTMLImageElement).src = "https://via.placeholder.com/40?text=" + coin.symbol;
                      }}
                    />
                  </div>
                  <div>
                    <h3 className="font-medium text-sm">{coin.name}</h3>
                    <p className="text-xs text-gray-500 dark:text-gray-400">{coin.symbol}</p>
                  </div>
                </div>
                <div className="flex items-center">
                  {coin.change24h > 0 ? (
                    <TrendingUp className="h-4 w-4 text-green-500 mr-1" />
                  ) : (
                    <TrendingDown className="h-4 w-4 text-red-500 mr-1" />
                  )}
                  <span className={cn("text-xs font-medium", coin.change24h > 0 ? "text-green-500" : "text-red-500")}>
                    {coin.change24h > 0 ? "+" : ""}
                    {coin.change24h.toFixed(2)}%
                  </span>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </DashboardLayout>
  );
};

export default Coins;
